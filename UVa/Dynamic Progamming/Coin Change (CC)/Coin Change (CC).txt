DP huyền thoại:
C1: Memoization: "Chạy 1 ví dụ sẽ rõ! Actually"
	Vd Ta có c[3]={1,3,5}; V=10;
								change(10)
		1+ change(9)				1+change(7)		1+change(5)
2+change(8)  2+change(6) 2+change(4)
:
:
:
Suy ra: Khi nhận 1 gía trị V vào, mỗi lượt ta chọn 1 trong các đồng xu, sau đó chọn min giữa các lượt chọn đó.

C2: Dynamic Programming
+ Thật ra 2 cách lật qua lật lại, ta cần tinh chỉnh cho hợp lý:
  Đặt c[i]: số coins ít nhất để biểu diễn i value
  => đáp án c[v]
  Ta có c[0]=0
  Với mọi 1<=i<=v: Ta cho nó thử chọn từng coin mỗi lượt
for(int j=0;j<n;j++){
	v[i]=1e9; //để kết nối các cái khác trong cùng 1 lượt chọn
  	if((i-v[j]>=0 && v[i-v[i]]!=0)|| j==v[i]){ //các TH chọn được
  		v[i]=min(v[i],v[i-v[j]]+1);

	}
}


C2.2: dp2;:
	+ Có thể đưa vòng for của k (các gía trị input) ra ngoài giống như việc ta vẫn hay làm là mở rộng input
	và build lại cái bảng, thực ra 2 cái bảng được build là i chan, Suy nghĩ ở chỗ: Là ta cần build gì, lưu gì
	để đi đến kết quả mong muốn. Vậy thôi

** Nhận xét về 2 Th đa số trong dp
1. Bài toán subnet: của tập n phần tử
	Mỗi phần tử chỉ được chọn 1 lần, ta đặt cấu hình đáp án là n ô
	thì khi tới ô nào thì gía trị phần tử a[i] trong input có  2 
	khả năng là CHỌN | KHÔNG chọn
	duyệt nhích nhích, parameter index+1.

2. Bài toán tổng chính xác (exact sum)
	Nghĩa là có thể chọn lại cùng 1 phần tử. (coin change)
	Từ tổng ban đầu, mỗi lượt sẽ chọn ra 1 gía trị trong input, lượt sau có thể chọn giống lưọt trước. Vì vậy, tại mỗi lượt
	ta cứ chạy vòng for qua tất cả các gía trị input. 
	Số lượt lượt, Kết thúc khi tổng = 0. (ko cố định)
	** ta cũng có thể áp dụng TH như bài toán 1 (subnet) nhưng khi
	chọn phần tử ở index id, ta lại ko nhích, mà chỉ hạ tổng, để cho số lượt bất định sẽ kết thúc khi sum=0.